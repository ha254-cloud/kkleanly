rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             (request.auth.token.email == 'kleanlyspt@gmail.com' ||
              request.auth.token.email == 'admin@kleanly.co.ke' ||
              request.auth.token.email == 'test@admin.com');
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Orders collection rules with proper admin access control
    match /orders/{orderId} {
      // ðŸ”’ ADMIN: Full access to all orders
      allow read, write, create, delete: if isAdmin();
      
      // ðŸ‘¤ USERS: Can read and write their own orders
      allow read, write, create: if isAuthenticated() && 
                                  resource.data.userID == request.auth.uid;
      
      // ðŸšš DRIVERS: Can read and update orders assigned to them
      allow read, update: if isAuthenticated() && 
                          resource.data.assignedDriver != null &&
                          exists(/databases/$(database)/documents/drivers/$(resource.data.assignedDriver)) &&
                          get(/databases/$(database)/documents/drivers/$(resource.data.assignedDriver)).data.email == request.auth.token.email;
      
      // Allow users to create orders with their own userID
      allow create: if isAuthenticated() && 
                    request.resource.data.userID == request.auth.uid;
    }
    
    // Drivers collection rules
    match /drivers/{driverId} {
      // ðŸ”’ ADMIN: Full access to all drivers
      allow read, write, create, delete: if isAdmin();
      
      // ðŸ”§ DEVELOPMENT: Temporarily allow any authenticated user to read drivers
      allow read: if isAuthenticated();
      
      // ðŸšš DRIVERS: Can read and update their own profile
      allow read, update: if isAuthenticated() && 
                          resource.data.email == request.auth.token.email;
      
      // Allow authenticated users to create driver accounts (for registration)
      allow create: if isAuthenticated();
    }
    
    // Order assignments collection for analytics
    match /orderAssignments/{assignmentId} {
      // ðŸ”’ ADMIN: Full access to assignment records
      allow read, write, create: if isAdmin();
      
      // ðŸšš DRIVERS: Can read assignments related to them
      allow read: if isAuthenticated() && 
                  resource.data.driverId != null &&
                  exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                  get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
    }
    
    // Driver earnings collection
    match /driverEarnings/{earningsId} {
      // ðŸ”’ ADMIN: Full access to all earnings records
      allow read, write, create: if isAdmin();
      
      // ðŸšš DRIVERS: Can read their own earnings
      allow read: if isAuthenticated() && 
                  resource.data.driverId != null &&
                  exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                  get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
    }
    
    // Driver shifts collection
    match /driverShifts/{shiftId} {
      // ðŸ”’ ADMIN: Full access to all shift records
      allow read, write, create: if isAdmin();
      
      // ðŸšš DRIVERS: Can read their own shifts
      allow read: if isAuthenticated() && 
                  resource.data.driverId != null &&
                  exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                  get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // ðŸ”’ ADMIN: Full access to all notifications
      allow read, write, create, delete: if isAdmin();
      
      // ðŸšš DRIVERS: Can read notifications sent to them
      allow read, update: if isAuthenticated() && 
                          resource.data.driverId != null &&
                          exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                          get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
      
      // ðŸ‘¤ USERS: Can read notifications sent to them
      allow read: if isAuthenticated() && 
                  resource.data.userId == request.auth.uid;
    }
    
    // Users collection rules (user profiles)
    match /users/{userId} {
      // ðŸ”’ ADMIN: Allow admin to read all user profiles
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can read and write their own profile
      allow read, write, create: if isAuthenticated() && 
                                 request.auth.uid == userId;
    }

    // User profiles collection
    match /userProfiles/{userId} {
      // ðŸ”’ ADMIN: Allow admin to read all user profiles
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can read and write their own profile
      allow read, write, create: if isAuthenticated() && 
                                 request.auth.uid == userId;
    }

    // User addresses collection
    match /userAddresses/{addressId} {
      // ðŸ”’ ADMIN: Allow admin to read all addresses
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can manage their own addresses
      allow read, write, create, delete: if isAuthenticated() && 
                                         resource.data.userId == request.auth.uid;
      
      // Allow creation if the user is setting their own ID
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
    }

    // User payment methods collection
    match /userPaymentMethods/{paymentId} {
      // ðŸ”’ ADMIN: Allow admin to read all payment methods
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can manage their own payment methods
      allow read, write, create, delete: if isAuthenticated() && 
                                         resource.data.userId == request.auth.uid;
      
      // Allow creation if the user is setting their own ID
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
    }

    // User preferences collection
    match /userPreferences/{userId} {
      // ðŸ”’ ADMIN: Allow admin to read all preferences
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can manage their own preferences
      allow read, write, create: if isAuthenticated() && 
                                 request.auth.uid == userId;
    }
    
    // Delivery tracking collection
    match /deliveryTracking/{trackingId} {
      // ðŸ”’ ADMIN: Admin can read/write all tracking data
      allow read, write, create: if isAdmin();
      
      // ðŸšš DRIVERS: Drivers can read/write tracking data for their assigned deliveries
      allow read, write: if isAuthenticated() && 
                         exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                         get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
      
      // ðŸ‘¤ USERS: Users can read tracking data for their orders
      allow read: if isAuthenticated() && 
                  exists(/databases/$(database)/documents/orders/$(resource.data.orderId)) && 
                  get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.userID == request.auth.uid;
    }
    
    // Allow authenticated users to read app configuration and settings
    match /appConfig/{configId} {
      allow read: if isAuthenticated();
    }
    
    // Allow authenticated users to read service information
    match /services/{serviceId} {
      allow read: if isAuthenticated();
    }
    
    // Default deny all other collections unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
  }
}tabases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             (request.auth.token.email == 'kleanlyspt@gmail.com' ||
              request.auth.token.email == 'admin@kleanly.co.ke' ||
              request.auth.token.email == 'test@admin.com');
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function for development - allows any authenticated user admin access
    function isDevMode() {
      return true; // Set to false in production
    }
    
    // Orders collection rules with proper admin access control
    match /orders/{orderId} {
      // ðŸ”’ ADMIN: Full access to all orders
      allow read, write, create, delete: if isAdmin();
      
      // ðŸ‘¤ USERS: Can read and write their own orders
      allow read, write, create: if isAuthenticated() && 
                                  resource.data.userID == request.auth.uid;
      
      // ðŸšš DRIVERS: Can read and update orders assigned to them
      allow read, update: if isAuthenticated() && 
                          resource.data.assignedDriver != null &&
                          exists(/databases/$(database)/documents/drivers/$(resource.data.assignedDriver)) &&
                          get(/databases/$(database)/documents/drivers/$(resource.data.assignedDriver)).data.email == request.auth.token.email;
      
      // Allow users to create orders with their own userID
      allow create: if isAuthenticated() && 
                    request.resource.data.userID == request.auth.uid;
    }
    
    // Drivers collection rules
    match /drivers/{driverId} {
      // ðŸ”’ ADMIN: Full access to all drivers
      allow read, write, create, delete: if isAdmin();
      
      // ï¿½ DEV MODE: Allow any authenticated user to read drivers for development
      allow read: if isAuthenticated() && isDevMode();
      
      // ï¿½ðŸšš DRIVERS: Can read and update their own profile
      allow read, update: if isAuthenticated() && 
                          resource.data.email == request.auth.token.email;
      
      // Allow all authenticated users to read driver info (for assignment)
      allow read: if isAuthenticated();
      
      // Allow authenticated users to create driver accounts (for registration)
      allow create: if isAuthenticated() && 
                    request.resource.data.email == request.auth.token.email;
    }
    
    // Order assignments collection for analytics
    match /orderAssignments/{assignmentId} {
      // ðŸ”’ ADMIN: Full access to assignment records
      allow read, write, create: if isAdmin();
      
      // ðŸšš DRIVERS: Can read assignments related to them
      allow read: if isAuthenticated() && 
                  resource.data.driverId != null &&
                  exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                  get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
    }
    
    // Driver earnings collection
    match /driverEarnings/{earningsId} {
      // ðŸ”’ ADMIN: Full access to all earnings records
      allow read, write, create: if isAdmin();
      
      // ðŸšš DRIVERS: Can read their own earnings
      allow read: if isAuthenticated() && 
                  resource.data.driverId != null &&
                  exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                  get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
    }
    
    // Driver shifts collection
    match /driverShifts/{shiftId} {
      // ðŸ”’ ADMIN: Full access to all shift records
      allow read, write, create: if isAdmin();
      
      // ðŸšš DRIVERS: Can read their own shifts
      allow read: if isAuthenticated() && 
                  resource.data.driverId != null &&
                  exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                  get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // ðŸ”’ ADMIN: Full access to all notifications
      allow read, write, create, delete: if isAdmin();
      
      // ðŸšš DRIVERS: Can read notifications sent to them
      allow read, update: if isAuthenticated() && 
                          resource.data.driverId != null &&
                          exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                          get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
      
      // ðŸ‘¤ USERS: Can read notifications sent to them
      allow read: if isAuthenticated() && 
                  resource.data.userId == request.auth.uid;
    }
    
    // Users collection rules (user profiles)
    match /users/{userId} {
      // ðŸ”’ ADMIN: Allow admin to read all user profiles
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can read and write their own profile
      allow read, write, create: if isAuthenticated() && 
                                 request.auth.uid == userId;
    }

    // User profiles collection
    match /userProfiles/{userId} {
      // ðŸ”’ ADMIN: Allow admin to read all user profiles
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can read and write their own profile
      allow read, write, create: if isAuthenticated() && 
                                 request.auth.uid == userId;
    }

    // User addresses collection
    match /userAddresses/{addressId} {
      // ðŸ”’ ADMIN: Allow admin to read all addresses
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can manage their own addresses
      allow read, write, create, delete: if isAuthenticated() && 
                                         resource.data.userId == request.auth.uid;
      
      // Allow creation if the user is setting their own ID
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
    }

    // User payment methods collection
    match /userPaymentMethods/{paymentId} {
      // ðŸ”’ ADMIN: Allow admin to read all payment methods
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can manage their own payment methods
      allow read, write, create, delete: if isAuthenticated() && 
                                         resource.data.userId == request.auth.uid;
      
      // Allow creation if the user is setting their own ID
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
    }

    // User preferences collection
    match /userPreferences/{userId} {
      // ðŸ”’ ADMIN: Allow admin to read all preferences
      allow read: if isAdmin();
      
      // ðŸ‘¤ USERS: Users can manage their own preferences
      allow read, write, create: if isAuthenticated() && 
                                 request.auth.uid == userId;
    }
    
    // Delivery tracking collection
    match /deliveryTracking/{trackingId} {
      // ðŸ”’ ADMIN: Admin can read/write all tracking data
      allow read, write, create: if isAdmin();
      
      // ðŸšš DRIVERS: Drivers can read/write tracking data for their assigned deliveries
      allow read, write: if isAuthenticated() && 
                         exists(/databases/$(database)/documents/drivers/$(resource.data.driverId)) &&
                         get(/databases/$(database)/documents/drivers/$(resource.data.driverId)).data.email == request.auth.token.email;
      
      // ðŸ‘¤ USERS: Users can read tracking data for their orders
      allow read: if isAuthenticated() && 
                  exists(/databases/$(database)/documents/orders/$(resource.data.orderId)) && 
                  get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.userID == request.auth.uid;
    }
    
    // Allow authenticated users to read app configuration and settings
    match /appConfig/{configId} {
      allow read: if isAuthenticated();
    }
    
    // Allow authenticated users to read service information
    match /services/{serviceId} {
      allow read: if isAuthenticated();
    }
    
    // Default deny all other collections unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
