/**
 * Driver Visibility Diagnostic Tool
 * Helps diagnose why drivers aren't showing up in admin dispatch
 */

import { auth } from '../services/firebase';
import { driverService } from '../services/driverService';
import { ensureAdminAccountExists } from './ensureAdminAccount';

export const runDriverVisibilityDiagnostic = async () => {
  console.log('\nüîç DRIVER VISIBILITY DIAGNOSTIC');
  console.log('================================');
  
  try {
    // Step 1: Check admin authentication
    console.log('\n1Ô∏è‚É£ Checking Admin Authentication...');
    const adminResult = await ensureAdminAccountExists();
    console.log(`Admin Status: ${adminResult.success ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`Message: ${adminResult.message}`);
    
    if (!adminResult.success) {
      console.log('‚ùå Cannot proceed without admin access');
      return;
    }
    
    // Step 2: Test Firestore access
    console.log('\n2Ô∏è‚É£ Testing Firestore Access...');
    try {
      const allDrivers = await driverService.getAllDrivers();
      console.log(`‚úÖ Successfully accessed drivers collection`);
      console.log(`üìä Total drivers found: ${allDrivers.length}`);
      
      if (allDrivers.length > 0) {
        console.log('\nüìã Driver Details:');
        allDrivers.forEach((driver, index) => {
          console.log(`  ${index + 1}. ${driver.name} (${driver.email})`);
          console.log(`     Status: ${driver.status}`);
          console.log(`     Online: ${driver.isOnline}`);
          console.log(`     Vehicle: ${driver.vehicleType} - ${driver.vehicleNumber}`);
          console.log(`     ID: ${driver.id}`);
          console.log('');
        });
      }
    } catch (error) {
      console.log(`‚ùå Firestore access failed: ${error}`);
      return;
    }
    
    // Step 3: Test available drivers filter
    console.log('\n3Ô∏è‚É£ Testing Available Drivers Filter...');
    try {
      const availableDrivers = await driverService.getAvailableDrivers();
      console.log(`‚úÖ Successfully filtered available drivers`);
      console.log(`üìä Available drivers: ${availableDrivers.length}`);
      
      if (availableDrivers.length > 0) {
        console.log('\nüìã Available Driver Details:');
        availableDrivers.forEach((driver, index) => {
          console.log(`  ${index + 1}. ${driver.name} (${driver.email})`);
          console.log(`     Status: ${driver.status}`);
          console.log(`     Vehicle: ${driver.vehicleType}`);
        });
      } else {
        console.log('‚ö†Ô∏è No drivers have status = "available"');
        
        // Check what statuses exist
        const allDrivers = await driverService.getAllDrivers();
        const statuses = allDrivers.map(d => d.status);
        const uniqueStatuses = [...new Set(statuses)];
        console.log(`üìä Found statuses: ${uniqueStatuses.join(', ')}`);
      }
    } catch (error) {
      console.log(`‚ùå Available drivers filter failed: ${error}`);
    }
    
    // Step 4: Test admin dispatch logic
    console.log('\n4Ô∏è‚É£ Testing Admin Dispatch Logic...');
    try {
      const user = auth.currentUser;
      const isAdmin = user?.email === 'kleanlyspt@gmail.com';
      
      console.log(`Current user: ${user?.email || 'Not logged in'}`);
      console.log(`Is admin: ${isAdmin ? '‚úÖ YES' : '‚ùå NO'}`);
      
      if (!isAdmin) {
        console.log('‚ö†Ô∏è User needs to be logged in as admin to see drivers in dispatch');
      }
    } catch (error) {
      console.log(`‚ùå Admin check failed: ${error}`);
    }
    
    // Step 5: Provide recommendations
    console.log('\n5Ô∏è‚É£ Recommendations:');
    const allDrivers = await driverService.getAllDrivers();
    const availableDrivers = await driverService.getAvailableDrivers();
    
    if (allDrivers.length === 0) {
      console.log('üìù No drivers exist - need to create drivers first');
      console.log('   Run: createAllDefaultDrivers() or use emergency driver creator');
    } else if (availableDrivers.length === 0) {
      console.log('üìù Drivers exist but none are "available"');
      console.log('   Update driver status to "available" in Firestore');
    } else {
      console.log('üìù Drivers exist and are available');
      console.log('   Check admin login and dispatch screen refresh');
    }
    
    console.log('\n‚úÖ Diagnostic completed!');
    
  } catch (error) {
    console.error('‚ùå Diagnostic failed:', error);
  }
};

export const fixDriverVisibility = async () => {
  console.log('\nüîß FIXING DRIVER VISIBILITY');
  console.log('===========================');
  
  try {
    // Step 1: Ensure admin account exists
    await ensureAdminAccountExists();
    
    // Step 2: Get all drivers and fix their status
    const allDrivers = await driverService.getAllDrivers();
    
    console.log(`Found ${allDrivers.length} drivers`);
    
    if (allDrivers.length === 0) {
      console.log('No drivers found - creating emergency driver...');
      // Could import and use emergency driver creator here
      return;
    }
    
    // Step 3: Fix driver statuses
    for (const driver of allDrivers) {
      if (driver.status !== 'available') {
        console.log(`Updating ${driver.name} status from "${driver.status}" to "available"`);
        await driverService.updateDriverStatus(driver.id!, 'available');
      }
    }
    
    console.log('‚úÖ Driver statuses updated!');
    
    // Step 4: Verify fix
    const availableDrivers = await driverService.getAvailableDrivers();
    console.log(`‚úÖ Available drivers now: ${availableDrivers.length}`);
    
  } catch (error) {
    console.error('‚ùå Fix failed:', error);
  }
};

export default {
  runDriverVisibilityDiagnostic,
  fixDriverVisibility
};
